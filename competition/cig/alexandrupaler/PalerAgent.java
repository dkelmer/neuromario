package competition.cig.alexandrupaler;

import java.util.Locale;
import java.util.Vector;

import com.sun.org.apache.xalan.internal.xsltc.compiler.sym;

import ch.idsia.ai.MLP;
import ch.idsia.ai.agents.Agent;
import ch.idsia.mario.engine.sprites.Mario;
import ch.idsia.mario.environments.Environment;

public class PalerAgent implements Agent
{
	protected boolean action[] = new boolean[Environment.numberOfButtons];
	protected String name = "AlexadruPaler_AStarAgent";
	
	protected int frame = 0;
	protected int nrFrames = 1;
	
	protected float[][] speeds = new float[2][24];
	
	protected float[] marioPos = {-1, -1};
	protected int steppedBack = 0;
	
	float jumpDist = 100.0f;
	float jumpHeight = 20.0f;
	
	boolean finish = false;
	
	boolean waitAndThink = true; 
	
	
	protected Astar star = new Astar();
	protected int[][] startstop = {{11, 11}, {0, 0}}; 
	protected int lengthJump = 12;
	
	protected int[][] howFar = new int[Environment.numberOfButtons][2];/*0 - frame, 1 - maxduration*/
	
	protected double[] w = {-0.19033696172792844, 0.1890225538035905, 0.08471176181707137, -0.540301483241944, 0.16627341150400277, -0.09940190514833018, 0.19638423310336578, -0.07824616419533524, 0.1490236400739399, -0.04147916769859366, -0.10070607302705985, 0.2386779828418629, 0.2578734484525233, -0.05588140374348867, -0.38467049205090426, -0.14893290114299512, 0.12101513552728584, -0.20640260824747325, 0.36032219708484947, 0.7799233401009369, -0.3496556625276084, -0.10832388619108053, -0.015811888833970292, 0.07613281474877799, 0.37549195769742094, 0.32075923926859456, 0.35368488459108455, 0.06008643148447232, 0.10495007434296158, 0.4899146133079575, -0.00906149958769214, 0.25410795243024126, -0.32995252384977736, -0.25080295624117155, -0.09679432840293521, 0.06781636592721882, -0.10775354525623294, -0.007660760586963699, -0.400109107480818, -0.2893945830175078, 0.12536422641323083, -0.20525146578363626, 0.45818587925107906, -0.3339310196557276, -0.05106665918732411, 0.4654056291878274, 0.4086077327242072, 0.3232120793270387, -0.17820854610009465, -0.0266844007012181, 0.010104105410695653, 0.04077934887515488, -0.2137510861360001, -0.4822283850496877, 0.043562935573783296, 0.0804637380843101, -0.16247581544128153, -0.1249353019897595, -0.05385845741422596, 0.288573165324161, 0.049053527844980474, -0.24574465842292056, 0.062348529320660075, -0.0998745778759625, -0.08473188295676508, 0.14326417382756976, 0.0985560702634704, -0.4284044983094463, -0.007324089360237061, 1.5187981100497803, 0.06989926455966032, -0.03510165764692086, -0.05051207495694831, 0.024223614783671566, 0.5344703183600849, -0.2518638411591492, 0.034215848991106475, 0.13852116380272647, 0.17458883978646, 0.03306507871374754, -0.01818169549596932, -0.6972964991491913, 0.08069844686812547, 0.009459509786291861, -0.025125854023423787, -0.238268802388066, 0.03954849038085628, 0.029742336485400717, 0.4439415711708681, 0.008023684130836975, -0.12171691812235379, -1.7254625969768596, 0.06638702420512917, 0.05752775621101836, -0.25331660438289644, -0.16562695070067449, -0.6161835376494084, 0.398071293219507, -0.13694633425317987, -0.1151061390500182, 0.0012500579283969146, -0.10430504196986426, -0.042721965288003934, -0.15730972888268863, -0.10435432899370373, -0.22163720124883288, 0.21359939852544113, 0.1584015041515344, 0.11821478027250969, -0.5319920244315176, -0.11392007596568102, 0.37204578858959725, -0.09511784614316976, 0.0965209297492389, 0.09747011677387286, -0.19261978528458187, -0.15577368431573593, 0.21033412268642127, -0.0111504995545788, 1.0965478666602686, -0.11554181609345938, 0.025243327375664214, 0.12095741018912318, -0.043539987224103745, 0.44310871782844663, -0.08079139469793281, 0.002718456739733324, -0.2540177724946916, -0.27313388200334543, 0.03963429522284988, 0.058443211994081715, 1.2161300293840083, -0.1629932064304087, -0.06959866907201523, 0.011368410098838313, 0.45731378053332544, -0.0911265199337708, -0.09353905296719972, 0.30583934557389497, -0.026824944501435424, 0.06406229169072734, -0.27695461865614807, -0.05267721816468071, -0.18003339507494467, 0.26477879310324737, 0.2122601894298021, -0.031867548466048536, 0.05856607544627684, 0.22804011349536357, 0.17662887102651642, 0.19194601788691926, 0.27085876840478307, -0.009986536565376757, -0.5264854814859595, -0.039965771963781344, 0.19837402635262796, 0.4533085421621643, -0.1510715654537521, 0.013525155745239647, 0.10929758982952813, 0.24394319704511488, -0.5809953257848012, 0.0842652792892016, 0.026760122176847295, 0.15107090619822883, 0.13037480216252614, 0.03639841343084606, -0.44963090047811494, -0.08555592898742968, 0.9289314723896588, -0.045929509647839886, -0.17127916178443447, -0.28764515561194465, 0.21508865803835653, 0.5669599912175466, 0.07091441161133193, -0.08180950943344012, 0.07861873355841327, 0.19976509028962483, 0.15186981673570604, -0.014736020979337355, 0.006848702645415374, 0.37812257935469284, 0.30403964772461706, -0.2867775605659252, -0.1371232992547006, 0.06376561649727396, 0.42379933472252834, -0.0919013143142531, 0.16399178208166473, -0.2626670594068768, -0.1674947965162648, -0.3220484926534296, 0.2911283536906246, -0.5863973879242259, 0.09172169242591105, 0.17834736595749673, 0.5921326190090351, 0.0960319823658131, 0.12399246238274492, -0.019353215570845718, 0.034120921864070855, -0.061225592069304904, 0.004789078276421806, 0.065332372635956, 0.13856866425747671, 0.13748727945178948, 0.028333742317895715, 0.14956494524055602, -0.08266350548969688, 0.08945787908747821, 0.019289045628524282, -0.2622632736155674, -0.2829440965557998, -0.46353239844910754, 0.31747823977942186, -0.025304777544980783, -0.05348687743731563, 0.08993917507039215, -0.05870259824972192, 0.0654735692065695, 0.20917952654100724, -0.14936967647051877, -0.01073241541862316, 0.3626121688602471, 0.351235315796643, 0.0506578282371075, 0.25186356723837233, -0.02274398622165655, -0.06875981389734735, -0.14948472824646944, 0.04912159291636283, 0.09878586751413877, 0.04162510002287497, 0.21333601751698847, 0.08495780522342511, 0.04003903780353688, -0.04364476589865846, 0.05596036978076903, -0.3337774033298305, 0.08048940786547124, 0.21000768380335436, -0.080064989117163, 0.036163902886070146, -0.011714114859808101, -0.2587972238620964, 0.12631338115388088, 0.14748223159613366, 0.10938726553978702, -0.0324658508409866, 0.19123029256654647, -0.06126517261006168, -0.23782598023956028, 0.1685624835354934, 0.08597452681823539, 0.19396870092923607, -0.2031510168149651, 0.2335371175799648, -0.25271902219292525, 0.1736041417236079, -0.12469750399722987, 0.02944502791056394, 0.021590280652036088, -0.08989425518837095, 0.06749834126422934, 0.010400556263514644, 0.0736633923724318, -0.07854405107114752, -0.17979154399358632, -0.36133813053278924, -0.13979728819895731, -0.2890588659454267, 0.15972895797870135, -0.007665630361704674, 0.2769396156951468, 0.0097947312302433, 1.378328243917989, 0.3193428992365725, 0.7833982375022609, 0.19355972908516297, -0.16572550930497965, -0.03323647870774585, -0.20950781663066564, -0.08213023636899439, -0.05933018094478016, -0.03887743650635054, -0.14038981318457427, -0.0014127271923923851, -0.10832146418282099, -0.18565071883433923, -0.012592542229594491, -0.028709514129223422, 0.05617667621948909, 0.08270736765169608, 0.08810686445182311, 0.020789920033666323, 0.4741307965957332, 0.28173802859518404, 0.24092553217544782, -0.5234806391033199, 0.34883280705967235, 0.04511862600010305, 0.1650874954460356, 0.128458412016117, 0.11304625449796685, -0.1692229884027665, 0.3243691932330734, -0.08214577734257718, 0.12855318742760585, -0.023414039675856587, 0.025298275030913756, -0.15790680039505436, 0.14370439172049823, 0.02997202631839785, 0.09989193414051822, -0.14812556465996718, 0.17010204955383348, -0.15413715731486685, 0.4238824984477461, -0.0648345961744805, -0.11054055608611563, -0.03800438828276794, 0.06550883786373526, 0.021415619909225005, -0.06708429468127394, 0.03714080025331314, 0.1258773901856547, -0.8986365383157829, -0.12807676109555838, 0.298843281788177, -0.12463401975086384, 0.07275063800163341, -0.05492354399082943, 0.26603764969360344, -0.18093018578578163, 0.09797446386456615, -0.14699214951425207, -0.11917498518489408, -0.09677532053136777, -0.03515155895453502, -0.03585653097063944, 0.009026885918872001, 0.012230697807211664, 0.26848933273858533, -0.16759816992343257, 0.10551603746619541, -0.01663226500462643, 0.028770959308654476, 0.09247450368096595, 0.15064036214704277, -0.058234536809602964, 0.02089523940016411, -0.3740746706568669, 0.04597389011180732, -0.13618100590677362, -0.32634514427151595, -0.01349618996979265, 0.14202118134464325, -0.17779936829688722, 0.04571420630618988, 0.06024561860841583, -0.0087529478445148, -0.009352804066065043, 0.08237859430955456, -0.5781613398217975, 0.49532624832565275, -0.08653355719374191, -1.2387361214655699, 0.01863497353674304, -0.19741446346981364, 0.4281546463672414, -0.10589350670794187, 0.024428405607144814, 0.26824769736268417, -0.29730938922822997, 0.03233564318229525, -0.3353246013504122, -0.11200659439183956, -0.0360424482801318, 0.22434282632448327, 0.31306276433943686, 0.10582018319046804, 0.28087900917873254, 0.1895722579608842, 0.5075513740978149, -0.024421444911998783, 0.29736789761955895, 0.09572478809570938, 0.3267269333969365, 0.27557261069122313, 0.2724947951649465, -0.1813680385779453, -0.026781529072944652, 0.11770011043632701, -0.14416291388841934, 0.16488048456572818, 0.2756137331503532, 0.10979298917233105, -0.14554182834951201, 0.10083479341304533};
	protected MLP mlp = new MLP(4, 50, 4);
	
	public PalerAgent()
	{
		mlp.setWeightsArray(w);
	}
	
	boolean stepBack = false;
//	@Override
	public boolean[] getAction(Environment observation) 
	{	
		reset();
//		action[Mario.KEY_SPEED] = true;
		
		if(processActions(false))
		{
			return action;
		}

		if(!observation.mayMarioJump())
		{
			return action;/*aici are un punct slab*/
		}
		
		byte[][] pos = observation.getMergedObservationZ(2, 1);
		pos = procMap(pos);
		star.setMap(pos);
		
		for(int i = 11; i >=0; i--)
		{
			if(pos[i][21] == 0)
			{
				startstop[1][0] = i;
				break;
			}
		}
		startstop[1][1] = 21;
		Vector<int[]> drum = star.findRoute(startstop);
		
		if(drum.isEmpty())
		{
			/*cauta cel mai apropiat punct de salvare*/
//			System.out.println("no way!");
			return action;
		}
		
		int h = 0;
		int w = 0;
		
		
		
		int maxPoints = 0;
		int maxH = 0;
		
		for(int i=0; i<6; i++)
		{
			int[] co = drum.get(i);
			int points = 0;
			
			if(co[1] < 11)
			{
				/*inseamna ca undeva se fereste
				 * prima varianta: sa stea pe loc
				 * a doua varianta: sa faca pasul inapoi
				 * */
				stepBack = true;
				w = -1;
				break;
			}
			
			for(int j=co[0]; j < 22; j++)
			{
				if(pos[j][co[1]] == 99)
				{
					points=-100;
					j = 23;
				}
			}
			
			if(pos[co[0] + 1][co[1]] > 100)
			{
				points = i;
			}
			
//			if(maxH < 11 - co[0])
//			{
//				points+=5; //creste inaltimea
//				maxH = 11 - co[0];
//			}
			
			if(maxPoints <= points)
			{
				maxPoints = points;
				h = 11 - co[0];
				w = co[1] - 11;
			}
			
			pos[co[0]][co[1]] = (byte)i;
		}
//		printByteArray(pos);
		
		if(waitAndThink && stepBack)
		{
//			System.out.println("reconsider");
			waitAndThink = !waitAndThink;
			stepBack = false;
			return action;/*prima varianta*/
		}
		
		if(!stepBack)/*reseteaza asteptarea*/
			waitAndThink = true;
		
		if(h <= 2 && w > 3)
			h = 4;
		
		if(w==0)
			w = 1;
		if(h==0)
			w = w/Math.abs(w);
		
		double[] inputV = new double[4];
		inputV[0] = ((double)h + h>0?1.5:0)/ 6.0;
		inputV[1] = ((double)w + w>0?1:0)/ 6.0;
		inputV[2] = 0.0;
		inputV[3] = 0.0;
		
		if(inputV[0] <= 0)
		{
			inputV[2] = Math.abs(inputV[0]);
			inputV[0] = 0.0;
		}
		
		if(inputV[1] <= 0)
		{
			inputV[3] = Math.abs(inputV[1]);
			inputV[1] = 0.0;
		}		
		
		double[] outputV = mlp.propagate(inputV);
		
		double threshold = 0.01;
		
		howFar[Mario.KEY_SPEED][0] = (int)(Math.ceil((outputV[0] > threshold ?  outputV[0] : 0) * 15));
		if(w<0)
			howFar[Mario.KEY_LEFT][0] = (int)(Math.ceil((outputV[1] > threshold ?  outputV[1] : 0) * 15));
		if(h!=0)
			howFar[Mario.KEY_JUMP][0] = (int)(Math.ceil((outputV[2] > threshold ?  outputV[2] : 0) * 15));
		if(w>0)
			howFar[Mario.KEY_RIGHT][0] = (int)(Math.ceil((outputV[3] > threshold ?  outputV[3] : 0) * 15));
		
//		System.out.println(h + " " + w);
//		System.out.println();
		
		return action;
	}
	

	public boolean processActions(boolean continues)
	{
		boolean actionContinues = continues;
		for(int i=0; i<howFar.length; i++)
		{
			if(howFar[i][0] > 0)
			{
				action[i] = true;
				howFar[i][0]--;
				actionContinues = true;
			}
		}
		
		return actionContinues;
	}
	
	
	protected byte[][][] vals = {{{70,0,70},{70,100,70},{70,70,70}},
									{{70,100,70},{70,100,70},{0,0,0}},
									{{70,70,70},{100,100,100},{100,100,100}}};
	private byte[][] procMap(byte[][] map)
	{
		boolean isGap = true;
		for(int j = 0; j < 22; j++)
		{
			isGap = true;
			
			for(int i = 0; i < 22; i++)
			{
				if(map[i][j] == 2
					|| map[i][j] == 9
					|| map[i][j] == 25)
				{
					int hi = 0;
					if(map[i][j] == 9) hi = 1;
					if(map[i][j] == 25) hi = 2;
					
					for(int t=-1; t<2; t++)
						for(int r=-1; r<2; r++)
							if(i+t < 22 && i+t >= 0
								&& j+r < 22 && j+r >=0
								&& vals[hi][1 + t][1 + r] != 0 /*adica daca sa ramana neschimbat*/ 
								&& map[i+t][j+r] != 1)
							{
								map[i+t][j+r] = vals[hi][1 + t][1 + r];
							}
								
				}
				else
				{
					if(map[i][j] == 1)
					{
						isGap = false;
						map[i][j] = 101;//(byte)Math.abs(map[i][j]);
					}
				}
			}
			
			if(isGap)
			{
				for(int k=9; k<22; k++)
				{
					map[k][j] = 99;
				}
			}
		}
		
		map[11][11] = 0;
		return map;
	}
	
	private int[] nextHighest(byte[][] map)
	{
		int start = 17;
		int[] ret = {map.length, start};
		for(int col = start; col > 11; col--)/*hard coded*/
		{
			int hr = highestRow(map, col);
			if(hr < ret[0])
			{
				ret[0] = hr;
				ret[1] = col;
			}
		} 
		return ret;
	}
	
	private int highestRow(byte[][] map, int col)
	{
		int s1 = map.length;
		
		for(int i=0; i < map.length; i++)
		{	
			if(map[i][col] != 0)
			{
				return i;
			}
		}
		return s1;
	}
	
	private int gapHeight(byte[][] map, int col)
	{
		int s1 = -1;
		
		for(int i=0; i<22; i++)
		{	
			if(map[i][col] != 0)
			{
				return 11 - i;
			}
		}
		return s1;
	}

	private int gapCol(byte[][] map, int col)
	{
		int s2 = 0;
		for(int i=11; i<map.length; i++)
		{	
			if(map[i][col] != 99)
				s2++;
		}
		return s2;
	}
	
	private int gapWidth(byte[][] map, int col)
	{
		int width = 0;
		while(col + width < map[0].length &&
				gapCol(map, col + width) == 0)
		{
			width++;
		}
		return width;
	}
	
	private void printByteArray(byte[][] pos)
	{
		String s = "";
		for(int i=0; i < pos.length; i++)
		{
			for(int j=0; j < pos[i].length; j++)
			{
				if(i==11 && j==11)
				{
					System.out.print(".   X");
				}
				else
				System.out.format(".%4d", pos[i][j]);
			}
//			System.out.println();
		}
//		System.out.println("----------------------");
	}

//	@Override
	public String getName() {
		return name;
	}

//	@Override
	public AGENT_TYPE getType() {
		return Agent.AGENT_TYPE.AI;	
	}

//	@Override
	public void reset() {
		action = new boolean[Environment.numberOfButtons];// Empty action
	}

//	@Override
	public void setName(String name) {
		this.name = name;
	}
	
	/*
	 * Utils
	 */
	
	public double scaleTo05(double v)
	{
		return v < 0 ? Math.abs(v)/2 : v/2 + 0.5;
	}
	
	public double scaleFrom05(double v)
	{
		return v < 0.5 ? - (v * 2): (v - 0.5) * 2;
	}
}